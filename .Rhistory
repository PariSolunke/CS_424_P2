df$Name <- ifelse(df$Name == "UNNAMED", df$Key, df$Name)
df$colour<-ifelse(df$Status == "TS", "Green",(ifelse(df$Status == "TD", "Blue",(ifelse(df$Status == "HU", "Red","Black")))))
coordinates(df) <- c( "Lon", "Lat" )
#initialisation of counter
id <- 1
Names<-as.array(unique(df$Name))
#for each Name, create a line that connects all points with that Name
for ( i in Names)
{
df3<-df[(df$Name==i),]
event.lines <- SpatialLines( list( Lines( Line( df3@coords ),ID=id )),
proj4string = CRS( "+init=epsg:4326" ) )
if ( id == 1 ) {
sp_lines  <- event.lines
} else {
sp_lines  <- spRbind( sp_lines, event.lines)
}
id <- id + 1
}
leaflet()%>%
addTiles() %>%
addPolylines( data =df@coords,colour=df$colour, weight =1,highlightOptions = highlightOptions(color = "white",weight = 5, bringToFront = F, opacity = 1) )->map
map
#df$cod<-cbind(df$Lon,df$Lat)
library(leaflet)
library(dplyr)
library(lubridate)
library(maptools)
library(sp)
txt <- purrr::map("atlantic.txt", readr::read_lines)
txt <- purrr::flatten_chr(txt)
x=txt
keep_lines <- grep(
pattern = "^[[:alpha:]{2}[:digit:]{6}]|[[:digit:]]{8}",
x = txt
)
txt <- txt[keep_lines]
hurdat <- as.data.frame(x, stringsAsFactors = FALSE)
header_rows <- grep(pattern = "^[[:alpha:]]{2}[[:digit:]]{6}.+", x)
# Split header_rows into variables
hurdat <- tidyr::extract(
data = hurdat,
col = "x",
into = c("Key", "Name", "Lines"),
regex = paste0(
"([:alpha:]{2}[:digit:]{6}),\\s+", # Key
"([[:upper:][:digit:]-]+)\\s*,\\s+", # Name
"([:digit:]+)," # Number of lines that follow
),
remove = FALSE,
convert = TRUE
)
# Fill headers down
hurdat <- tidyr::fill(data = hurdat, .data$Key, .data$Name, .data$Lines)
# Remove original header rows
hurdat <- hurdat[-header_rows, ]
# Split storm details into variables
hurdat <- tidyr::extract(
data = hurdat,
col = "x",
into = c(
"Year",
"Month",
"Date",
"Hour",
"Minute",
"Record",
"Status",
"Lat",
"LatHemi",
"Lon",
"LonHemi",
"Wind",
"Pressure",
"NE34",
"SE34",
"SW34",
"NW34",
"NE50",
"SE50",
"SW50",
"NW50",
"NE64",
"SE64",
"SW64",
"NW64"
),
regex = paste0(
"^([:digit:]{4})", # Year
"([:digit:]{2})", # Month
"([:digit:]{2}),\\s+", # Date
"([:digit:]{2})", # Hour
"([:digit:]{2}),\\s+", # Minute
"([:alpha:]*),\\s+", # Record
"([:alpha:]{2}),\\s+", # Status
"([:digit:]{1,2}\\.[:digit:]{1})", # Latitude
"([:alpha:]{1}),\\s+", # Hemisphere
"([:digit:]{1,3}\\.[:digit:]{1})", # Longitude
"([:alpha:]{1}),\\s+", # Hemisphere
"([[:digit:]-]+),\\s+", # Wind
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+).*" #
),
remove = FALSE,
convert = TRUE
)
hurdat <- dplyr::mutate(
.data = hurdat,
Lat = dplyr::if_else(
.data$LatHemi == "N", .data$Lat * 1, .data$Lat * -1
),
Lon = dplyr::if_else(
.data$LonHemi == "E", .data$Lon * 1, .data$Lon * -1
)
)
hurdat$DateTime <- paste(
paste(hurdat$Year, hurdat$Month, hurdat$Date, sep = "-"),
paste(hurdat$Hour, hurdat$Minute, "00", sep = ":"),
sep = " "
)
hurdat <- dplyr::select(
.data = hurdat,
.data$Key, .data$Name, .data$DateTime, .data$Record:.data$Lat,
.data$Lon, .data$Wind:.data$NW64
)
hurdat$years<-year(hurdat$DateTime)
df<-hurdat[(hurdat$years==2007),]
df$Name <- ifelse(df$Name == "UNNAMED", df$Key, df$Name)
df$colour<-ifelse(df$Status == "TS", "Green",(ifelse(df$Status == "TD", "Blue",(ifelse(df$Status == "HU", "Red","Black")))))
coordinates(df) <- c( "Lon", "Lat" )
#initialisation of counter
id <- 1
Names<-as.array(unique(df$Name))
#for each Name, create a line that connects all points with that Name
for ( i in Names)
{
df3<-df[(df$Name==i),]
event.lines <- SpatialLines( list( Lines( Line( df3@coords ),ID=id )),
proj4string = CRS( "+init=epsg:4326" ) )
if ( id == 1 ) {
sp_lines  <- event.lines
} else {
sp_lines  <- spRbind( sp_lines, event.lines)
}
id <- id + 1
}
leaflet()%>%
addTiles() %>%
addPolylines( data =df@coords,weight =1,highlightOptions = highlightOptions(color = "white",weight = 5, bringToFront = F, opacity = 1) )->map
map
#df$cod<-cbind(df$Lon,df$Lat)
library(leaflet)
library(dplyr)
library(lubridate)
library(maptools)
library(sp)
txt <- purrr::map("atlantic.txt", readr::read_lines)
txt <- purrr::flatten_chr(txt)
x=txt
keep_lines <- grep(
pattern = "^[[:alpha:]{2}[:digit:]{6}]|[[:digit:]]{8}",
x = txt
)
txt <- txt[keep_lines]
hurdat <- as.data.frame(x, stringsAsFactors = FALSE)
header_rows <- grep(pattern = "^[[:alpha:]]{2}[[:digit:]]{6}.+", x)
# Split header_rows into variables
hurdat <- tidyr::extract(
data = hurdat,
col = "x",
into = c("Key", "Name", "Lines"),
regex = paste0(
"([:alpha:]{2}[:digit:]{6}),\\s+", # Key
"([[:upper:][:digit:]-]+)\\s*,\\s+", # Name
"([:digit:]+)," # Number of lines that follow
),
remove = FALSE,
convert = TRUE
)
# Fill headers down
hurdat <- tidyr::fill(data = hurdat, .data$Key, .data$Name, .data$Lines)
# Remove original header rows
hurdat <- hurdat[-header_rows, ]
# Split storm details into variables
hurdat <- tidyr::extract(
data = hurdat,
col = "x",
into = c(
"Year",
"Month",
"Date",
"Hour",
"Minute",
"Record",
"Status",
"Lat",
"LatHemi",
"Lon",
"LonHemi",
"Wind",
"Pressure",
"NE34",
"SE34",
"SW34",
"NW34",
"NE50",
"SE50",
"SW50",
"NW50",
"NE64",
"SE64",
"SW64",
"NW64"
),
regex = paste0(
"^([:digit:]{4})", # Year
"([:digit:]{2})", # Month
"([:digit:]{2}),\\s+", # Date
"([:digit:]{2})", # Hour
"([:digit:]{2}),\\s+", # Minute
"([:alpha:]*),\\s+", # Record
"([:alpha:]{2}),\\s+", # Status
"([:digit:]{1,2}\\.[:digit:]{1})", # Latitude
"([:alpha:]{1}),\\s+", # Hemisphere
"([:digit:]{1,3}\\.[:digit:]{1})", # Longitude
"([:alpha:]{1}),\\s+", # Hemisphere
"([[:digit:]-]+),\\s+", # Wind
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+).*" #
),
remove = FALSE,
convert = TRUE
)
hurdat <- dplyr::mutate(
.data = hurdat,
Lat = dplyr::if_else(
.data$LatHemi == "N", .data$Lat * 1, .data$Lat * -1
),
Lon = dplyr::if_else(
.data$LonHemi == "E", .data$Lon * 1, .data$Lon * -1
)
)
hurdat$DateTime <- paste(
paste(hurdat$Year, hurdat$Month, hurdat$Date, sep = "-"),
paste(hurdat$Hour, hurdat$Minute, "00", sep = ":"),
sep = " "
)
hurdat <- dplyr::select(
.data = hurdat,
.data$Key, .data$Name, .data$DateTime, .data$Record:.data$Lat,
.data$Lon, .data$Wind:.data$NW64
)
hurdat$years<-year(hurdat$DateTime)
df<-hurdat[(hurdat$years==2007),]
df$Name <- ifelse(df$Name == "UNNAMED", df$Key, df$Name)
df$colour<-ifelse(df$Status == "TS", "Green",(ifelse(df$Status == "TD", "Blue",(ifelse(df$Status == "HU", "Red","Black")))))
coordinates(df) <- c( "Lon", "Lat" )
#initialisation of counter
id <- 1
Names<-as.array(unique(df$Name))
#for each Name, create a line that connects all points with that Name
for ( i in Names)
{
df3<-df[(df$Name==i),]
event.lines <- SpatialLines( list( Lines( Line( df3@coords ),ID=id )),
proj4string = CRS( "+init=epsg:4326" ) )
if ( id == 1 ) {
sp_lines  <- event.lines
} else {
sp_lines  <- spRbind( sp_lines, event.lines)
}
id <- id + 1
}
leaflet()%>%
addTiles() %>%
addPolylines( data =sp_lines,weight =1,highlightOptions = highlightOptions(color = "white",weight = 5, bringToFront = F, opacity = 1) )->map
map
#df$cod<-cbind(df$Lon,df$Lat)
library(shiny); runApp('C:/Users/Parikshit/Downloads/app (2).R')
years<-2005:2018
years
yr<-2005:2018
yr<-append(allTags,"All",after = 0)
yr<-2005:2018
yr<-append(year,"All",after = 0)
yr
yr<-as.character.factor(2005:2018)
yr<-as.character.array(2005:2018)
yr<-as.array(2005:2018)
yr<-2005:2018
yr<-append(yr,"All",after = 0)
yr
yr<-NULL
yr
yr<-2005:2018
yr<-append(yr,"All",after = 0)
yr
append(Names,"All",after = 0)
runApp('GitHub/Litterati-Analysis/Litterati')
runApp('C:/Users/Parikshit/Downloads/app (2).R')
runApp('C:/Users/Parikshit/Downloads/app (2).R')
runApp('C:/Users/Parikshit/Downloads/app (2).R')
runApp('C:/Users/Parikshit/Downloads/app (2).R')
runApp('C:/Users/Parikshit/Downloads/app (2).R')
runApp('C:/Users/Parikshit/Downloads/app (2).R')
df2$hu5
df2$HU5
str(df2)
runApp('C:/Users/Parikshit/Downloads/app (2).R')
df2$HU5
runApp('C:/Users/Parikshit/Downloads/app (2).R')
runApp('C:/Users/Parikshit/Downloads/app (2).R')
runApp('C:/Users/Parikshit/Downloads/app (2).R')
hurdat[hurdat$Name=='FIVE',]
hurdat$Name[hurdat$years>2010]
unique(hurdat$Name[hurdat$years>2010])
unique(hurdat$Name[hurdat$years==2017])
unique(hurdat$Name[hurdat$years==2018])
unique(hurdat$Name[hurdat$years==2016])
runApp('C:/Users/Parikshit/Downloads/app (2).R')
stri_cmp("None", "None")
stri_cmp("Abc", "None")
runApp('C:/Users/Parikshit/Downloads/app (2).R')
runApp('C:/Users/Parikshit/Downloads/app (2).R')
library(leaflet)
library(dplyr)
library(lubridate)
library(maptools)
library(sp)
txt <- purrr::map("atlantic.txt", readr::read_lines)
txt <- purrr::flatten_chr(txt)
x=txt
keep_lines <- grep(
pattern = "^[[:alpha:]{2}[:digit:]{6}]|[[:digit:]]{8}",
x = txt
)
txt <- txt[keep_lines]
hurdat <- as.data.frame(x, stringsAsFactors = FALSE)
header_rows <- grep(pattern = "^[[:alpha:]]{2}[[:digit:]]{6}.+", x)
# Split header_rows into variables
hurdat <- tidyr::extract(
data = hurdat,
col = "x",
into = c("Key", "Name", "Lines"),
regex = paste0(
"([:alpha:]{2}[:digit:]{6}),\\s+", # Key
"([[:upper:][:digit:]-]+)\\s*,\\s+", # Name
"([:digit:]+)," # Number of lines that follow
),
remove = FALSE,
convert = TRUE
)
# Fill headers down
hurdat <- tidyr::fill(data = hurdat, .data$Key, .data$Name, .data$Lines)
# Remove original header rows
hurdat <- hurdat[-header_rows, ]
# Split storm details into variables
hurdat <- tidyr::extract(
data = hurdat,
col = "x",
into = c(
"Year",
"Month",
"Date",
"Hour",
"Minute",
"Record",
"Status",
"Lat",
"LatHemi",
"Lon",
"LonHemi",
"Wind",
"Pressure",
"NE34",
"SE34",
"SW34",
"NW34",
"NE50",
"SE50",
"SW50",
"NW50",
"NE64",
"SE64",
"SW64",
"NW64"
),
regex = paste0(
"^([:digit:]{4})", # Year
"([:digit:]{2})", # Month
"([:digit:]{2}),\\s+", # Date
"([:digit:]{2})", # Hour
"([:digit:]{2}),\\s+", # Minute
"([:alpha:]*),\\s+", # Record
"([:alpha:]{2}),\\s+", # Status
"([:digit:]{1,2}\\.[:digit:]{1})", # Latitude
"([:alpha:]{1}),\\s+", # Hemisphere
"([:digit:]{1,3}\\.[:digit:]{1})", # Longitude
"([:alpha:]{1}),\\s+", # Hemisphere
"([[:digit:]-]+),\\s+", # Wind
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+).*" #
),
remove = FALSE,
convert = TRUE
)
hurdat <- dplyr::mutate(
.data = hurdat,
Lat = dplyr::if_else(
.data$LatHemi == "N", .data$Lat * 1, .data$Lat * -1
),
Lon = dplyr::if_else(
.data$LonHemi == "E", .data$Lon * 1, .data$Lon * -1
)
)
hurdat$DateTime <- paste(
paste(hurdat$Year, hurdat$Month, hurdat$Date, sep = "-"),
paste(hurdat$Hour, hurdat$Minute, "00", sep = ":"),
sep = " "
)
hurdat <- dplyr::select(
.data = hurdat,
.data$Key, .data$Name, .data$DateTime, .data$Record:.data$Lat,
.data$Lon, .data$Wind:.data$NW64
)
hurdat$years<-year(hurdat$DateTime)
df<-hurdat[(hurdat$years>2004),]
df$Name <- ifelse(df$Name == "UNNAMED", df$Key, df$Name)
df$colour<-ifelse(df$Status == "TS", "Green",(ifelse(df$Status == "TD", "Blue",(ifelse(df$Status == "HU", "Red","Black")))))
coordinates(df) <- c( "Lon", "Lat" )
#initialisation of counter
id <- 1
Names<-as.array(unique(df$Name))
#for each Name, create a line that connects all points with that Name
for ( i in Names)
{
df3<-df[(df$Name==i),]
event.lines <- SpatialLines( list( Lines( Line( df3@coords ),ID=id )),
proj4string = CRS( "+init=epsg:4326" ) )
if ( id == 1 ) {
sp_lines  <- event.lines
} else {
sp_lines  <- spRbind( sp_lines, event.lines)
}
id <- id + 1
}
leaflet()%>%
addTiles() %>%
addPolylines( data =sp_lines,weight =1,highlightOptions = highlightOptions(color = "white",weight = 5, bringToFront = F, opacity = 1) )->map
map
#df$cod<-cbind(df$Lon,df$Lat)
df[(df$Name=="ARLENE"),]
runApp('C:/Users/Parikshit/Downloads/app (2).R')
runApp('app (2).R')
library(shiny); runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
library(shiny); runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
df[(df$Name=="COLIN - 2010"),]
df$Name
shiny::runApp('GitHub/CS_424_P2')
shiny::runApp('GitHub/CS_424_P2')

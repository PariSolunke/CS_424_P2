sp_lines  <- spRbind( sp_lines, event.lines)
}
id <- id + 1
}
leaflet()%>%
addTiles() %>%
addPolylines( data =sp_lines,weight =1,highlightOptions = highlightOptions(color = "white",weight = 5, bringToFront = F, opacity = 1) )->map
map
#df$cod<-cbind(df$Lon,df$Lat)
df[(df$Name=="ARLENE"),]
runApp('C:/Users/Parikshit/Downloads/app (2).R')
runApp('app (2).R')
library(shiny); runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
library(shiny); runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
runApp('C:/Users/Parikshit/Desktop/CS_424_P2/Hurricanes.R')
df[(df$Name=="COLIN - 2010"),]
df$Name
shiny::runApp('GitHub/CS_424_P2')
shiny::runApp('GitHub/CS_424_P2')
library(shiny)
library(shinydashboard)
library(ggplot2)
library(lubridate)
library(grid)
library(leaflet)
library(DT)
library(stringi)
library(dplyr)
library(plyr)
library(maptools)
library(sp)
library(data.table)
library(RColorBrewer)
library(naniar)
x <- purrr::map("atlantic.txt", readr::read_lines)
x <- purrr::flatten_chr(x)
hurdat <- as.data.frame(x, stringsAsFactors = FALSE)
header_rows <- grep(pattern = "^[[:alpha:]]{2}[[:digit:]]{6}.+", x)
# Split header_rows into variables
hurdat <- tidyr::extract(
data = hurdat,
col = "x",
into = c("Key", "Name", "Lines"),
regex = paste0(
"([:alpha:]{2}[:digit:]{6}),\\s+", # Key
"([[:upper:][:digit:]-]+)\\s*,\\s+", # Name
"([:digit:]+)," # Number of lines that follow
),
remove = FALSE,
convert = TRUE
)
# Fill headers down
hurdat <- tidyr::fill(data = hurdat, .data$Key, .data$Name, .data$Lines)
# Remove original header rows
hurdat <- hurdat[-header_rows, ]
# Split storm details into variables
hurdat <- tidyr::extract(
data = hurdat,
col = "x",
into = c(
"Year",
"Month",
"Date",
"Hour",
"Minute",
"Record",
"Status",
"Lat",
"LatHemi",
"Lon",
"LonHemi",
"Wind",
"Pressure",
"NE34",
"SE34",
"SW34",
"NW34",
"NE50",
"SE50",
"SW50",
"NW50",
"NE64",
"SE64",
"SW64",
"NW64"
),
regex = paste0(
"^([:digit:]{4})", # Year
"([:digit:]{2})", # Month
"([:digit:]{2}),\\s+", # Date
"([:digit:]{2})", # Hour
"([:digit:]{2}),\\s+", # Minute
"([:alpha:]*),\\s+", # Record
"([:alpha:]{2}),\\s+", # Status
"([:digit:]{1,2}\\.[:digit:]{1})", # Latitude
"([:alpha:]{1}),\\s+", # Hemisphere
"([:digit:]{1,3}\\.[:digit:]{1})", # Longitude
"([:alpha:]{1}),\\s+", # Hemisphere
"([[:digit:]-]+),\\s+", # Wind
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+).*" #
),
remove = FALSE,
convert = TRUE
)
hurdat <- dplyr::mutate(
.data = hurdat,
Lat = dplyr::if_else(
.data$LatHemi == "N", .data$Lat * 1, .data$Lat * -1
),
Lon = dplyr::if_else(
.data$LonHemi == "E", .data$Lon * 1, .data$Lon * -1
)
)
hurdat$DateTime <- paste(
paste(hurdat$Year, hurdat$Month, hurdat$Date, sep = "-"),
paste(hurdat$Hour, hurdat$Minute, "00", sep = ":"),
sep = " "
)
hurdat <- dplyr::select(
.data = hurdat,
.data$Key, .data$Name, .data$DateTime, .data$Record:.data$Lat,
.data$Lon, .data$Wind:.data$NW64
)
hurdat$DateTime <- as.POSIXct(
strptime(hurdat$DateTime, format = "%Y-%m-%d %H:%M:%S")
)
hurdat$Name[hurdat$Name == "UNNAMED"] <- hurdat$Key[hurdat$Name == "UNNAMED"]
hurdat$Year<-year(hurdat$DateTime)
hurdat$Category[hurdat$Status == "TD"|hurdat$Status == "SD"] = 0.5
hurdat$Category[hurdat$Status == "TS"|hurdat$Status == "SS"] = 0.75
hurdat$Category[hurdat$Status == "HU" & hurdat$Wind>=64 & hurdat$Wind<=82] = 1
hurdat$Category[hurdat$Status == "HU" & hurdat$Wind>=83 & hurdat$Wind<=95] = 2
hurdat$Category[hurdat$Status == "HU" & hurdat$Wind>=96 & hurdat$Wind<=112] = 3
hurdat$Category[hurdat$Status == "HU" & hurdat$Wind>=113 & hurdat$Wind<=136] = 4
hurdat$Category[hurdat$Status == "HU" & hurdat$Wind>=137] = 5
hurdat$Name <- paste(hurdat$Name, "-", hurdat$Year)
hurdat$Date =  format(hurdat$DateTime,format='%Y-%m-%d')
hurdat<-hurdat %>% replace_with_na(replace = list(Pressure = -999))
x <- purrr::map("pacific.txt", readr::read_lines)
x <- purrr::flatten_chr(x)
pacific <- as.data.frame(x, stringsAsFactors = FALSE)
header_rows <- grep(pattern = "^[[:alpha:]]{2}[[:digit:]]{6}.+", x)
# Split header_rows into variables
pacific <- tidyr::extract(
data = pacific,
col = "x",
into = c("Key", "Name", "Lines"),
regex = paste0(
"([:alpha:]{2}[:digit:]{6}),\\s+", # Key
"([[:upper:][:digit:]-]+)\\s*,\\s+", # Name
"([:digit:]+)," # Number of lines that follow
),
remove = FALSE,
convert = TRUE
)
# Fill headers down
pacific <- tidyr::fill(data = pacific, .data$Key, .data$Name, .data$Lines)
# Remove original header rows
pacific <- pacific[-header_rows, ]
# Split storm details into variables
pacific <- tidyr::extract(
data = pacific,
col = "x",
into = c(
"Year",
"Month",
"Date",
"Hour",
"Minute",
"Record",
"Status",
"Lat",
"LatHemi",
"Lon",
"LonHemi",
"Wind",
"Pressure",
"NE34",
"SE34",
"SW34",
"NW34",
"NE50",
"SE50",
"SW50",
"NW50",
"NE64",
"SE64",
"SW64",
"NW64"
),
regex = paste0(
"^([:digit:]{4})", # Year
"([:digit:]{2})", # Month
"([:digit:]{2}),\\s+", # Date
"([:digit:]{2})", # Hour
"([:digit:]{2}),\\s+", # Minute
"([:alpha:]*),\\s+", # Record
"([:alpha:]{2}),\\s+", # Status
"([:digit:]{1,2}\\.[:digit:]{1})", # Latitude
"([:alpha:]{1}),\\s+", # Hemisphere
"([:digit:]{1,3}\\.[:digit:]{1})", # Longitude
"([:alpha:]{1}),\\s+", # Hemisphere
"([[:digit:]-]+),\\s+", # Wind
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+),\\s+", #
"([[:digit:]-]+).*" #
),
remove = FALSE,
convert = TRUE
)
pacific <- dplyr::mutate(
.data = pacific,
Lat = dplyr::if_else(
.data$LatHemi == "N", .data$Lat * 1, .data$Lat * -1
),
Lon = dplyr::if_else(
.data$LonHemi == "E", .data$Lon * 1, .data$Lon * -1
)
)
pacific$DateTime <- paste(
paste(pacific$Year, pacific$Month, pacific$Date, sep = "-"),
paste(pacific$Hour, pacific$Minute, "00", sep = ":"),
sep = " "
)
pacific <- dplyr::select(
.data = pacific,
.data$Key, .data$Name, .data$DateTime, .data$Record:.data$Lat,
.data$Lon, .data$Wind:.data$NW64
)
pacific$DateTime <- as.POSIXct(
strptime(pacific$DateTime, format = "%Y-%m-%d %H:%M:%S")
)
pacific$Name[pacific$Name == "UNNAMED"] <- pacific$Key[pacific$Name == "UNNAMED"]
pacific$Year<-year(pacific$DateTime)
pacific<-pacific %>% replace_with_na(replace = list(Pressure = -999))
pacific$Category[pacific$Status == "TD"|pacific$Status == "SD"] = 0.5
pacific$Category[pacific$Status == "TS"|pacific$Status == "SS"] = 0.75
pacific$Category[pacific$Status == "HU" & pacific$Wind>=64 & pacific$Wind<=82] = 1
pacific$Category[pacific$Status == "HU" & pacific$Wind>=83 & pacific$Wind<=95] = 2
pacific$Category[pacific$Status == "HU" & pacific$Wind>=96 & pacific$Wind<=112] = 3
pacific$Category[pacific$Status == "HU" & pacific$Wind>=113 & pacific$Wind<=136] = 4
pacific$Category[pacific$Status == "HU" & pacific$Wind>=137] = 5
pacific$Name <- paste(pacific$Name, "-", pacific$Year)
pacific$Date =  format(pacific$DateTime,format='%Y-%m-%d')
pacific$Lon[pacific$Lon<0] = pacific$Lon[pacific$Lon<0] + 360
df1 = hurdat[c("Key","Wind")]
df2 = hurdat[c("Key","Pressure")]
nameKey = hurdat[c("Key","Name")]
df1 = ddply(df1, "Key", numcolwise(max))
df2 = ddply(df2, "Key", numcolwise(min))
nameKey = ddply(nameKey, "Key", function(nameKey) unique(nameKey))
hurricanes = merge(df1,df2, by.x = "Key", by.y = "Key")
df1 = hurdat[c("Key","DateTime")]
df1 = data.table(df1)
df1 = df1[,list(DateTime = min(DateTime)), by = Key]
df1 = data.frame(df1)
hurricanes = merge(hurricanes,df1, by.x = "Key", by.y = "Key")
df2 = hurdat[c("Key","Category")]
df2 = df2[!is.na(df2$Category),]
df2 = ddply(df2, "Key", numcolwise(max))
df2 = merge(df2,df1, by.x = "Key", by.y = "Key")
df2["Key"] <- NULL
df2$DateTime = year(df2$DateTime)
df2 = aggregate(rep(1, nrow(df2)), by = list(x = df2$Category, y = df2$DateTime), sum)
colnames(df2) = c("Category", "Year", "Count")
df2$TD[df2$Category == 0.5] <- df2$Count[df2$Category == 0.5]
df2$TS[df2$Category == 0.75] <- df2$Count[df2$Category == 0.75]
df2$HU1[df2$Category == 1] <- df2$Count[df2$Category == 1]
df2$HU2[df2$Category == 2] <- df2$Count[df2$Category == 2]
df2$HU3[df2$Category == 3] <- df2$Count[df2$Category == 3]
df2$HU4[df2$Category == 4] <- df2$Count[df2$Category == 4]
df2$HU5[df2$Category == 5] <- df2$Count[df2$Category == 5]
df2["Category"] <- NULL
df2["Count"] <- NULL
df2[is.na(df2)] <- 0
df2 = ddply(df2,"Year",numcolwise(sum))
Names<-as.array(unique(hurdat$Name))
yr<-1851:2018
Wtoph<-hurricanes[order(hurricanes$Wind, decreasing = TRUE),]
Wtoph<-head(Wtoph,10)
Ptoph<-hurricanes[order(hurricanes$Pressure, decreasing = FALSE),]
Ptoph<-head(Ptoph,10)
dfP1 = pacific[c("Name","Wind")]
dfP2 = pacific[c("Name","Pressure")]
dfP1 = ddply(dfP1, "Name", numcolwise(max))
dfP2 = ddply(dfP2, "Name", numcolwise(min))
NamesP<-as.array(unique(pacific$Name))
yrP<-1949:2018
WtophP<-dfP1[order(dfP1$Wind, decreasing = TRUE),]
WtophP<-head(WtophP,10)
PtophP<-dfP2[order(dfP2$Pressure, decreasing = FALSE),]
PtophP<-head(PtophP,10)
df<-hurdat
landfalls<-df[(df$Record=="L"),]
landfalls<-NULL
landfalls
df<-hurdat
landfalls<-df[(df$Record=="L"),df$Lat,df$Lon]
df<-hurdat
landfalls<-df[(df$Record=="L"),(df$Lat,df$Lon)]
df<-hurdat
landfalls<-df[(df$Record=="L"),c(df$Lat,df$Lon)]
df<-hurdat
landfalls<-df[(df$Record=="L"),c(Lat,Lon)]
df<-hurdat
landfalls<-df[(df$Record=="L"),c(1,2)]
landfalls
str(df)
df<-hurdat
landfalls<-df[(df$Record=="L"),c(6,7)]
df<-pacific
landfallsp<-df[(df$Record=="L"),c(6,7)]
dim(landfalls)
dim(landfallsp)
landfallsp
df<-pacific
df[(df$Record=="L"),]
df<-hurdat
landfalls<-df[(df$Record=="L"),c(6,7)]
df<-pacific
landfallsp<-df[(df$Record=="L"),c(6,7)]
landfalls<-rbind(landfalls,landfallsp)
library(KernSmooth)
str(landfalls)
kde <- bkde2D(landfalls[ , list(Lon, Lat)],gridsize = c(100,100))
CL <- contourLines(kde$x1 , kde$x2 , kde$fhat)
kde <- bkde2D(landfalls[ , list(landfalls$Lon, landfalls$Lat)],gridsize = c(100,100))
CL <- contourLines(kde$x1 , kde$x2 , kde$fhat)
kde <- bkde2D(landfalls,gridsize = c(100,100))
kde <- bkde2D(landfalls, bandwidth=c(1,1),gridsize = c(100,100))
kde <- bkde2D(landfalls, bandwidth=c(1,1),gridsize = c(1000,1000))
CL <- contourLines(kde$x1 , kde$x2 , kde$fhat)
LEVS <- as.factor(sapply(CL, `[[`, "level"))
NLEV <- length(levels(LEVS))
## CONVERT CONTOUR LINES TO POLYGONS
pgons <- lapply(1:length(CL), function(i)
Polygons(list(Polygon(cbind(CL[[i]]$x, CL[[i]]$y))), ID=i))
spgons = SpatialPolygons(pgons)
## Leaflet map with polygons
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS])
CL <- contourLines(kde$x2 , kde$x1 , kde$fhat)
LEVS <- as.factor(sapply(CL, `[[`, "level"))
NLEV <- length(levels(LEVS))
## CONVERT CONTOUR LINES TO POLYGONS
pgons <- lapply(1:length(CL), function(i)
Polygons(list(Polygon(cbind(CL[[i]]$x, CL[[i]]$y))), ID=i))
spgons = SpatialPolygons(pgons)
## Leaflet map with polygons
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS])
CL
bkde
kde
kde <- bkde2D(landfalls, bandwidth=c(1,1),gridsize = c(300,300))
CL <- contourLines(kde$x2 , kde$x1 , kde$fhat)
LEVS <- as.factor(sapply(CL, `[[`, "level"))
NLEV <- length(levels(LEVS))
## CONVERT CONTOUR LINES TO POLYGONS
pgons <- lapply(1:length(CL), function(i)
Polygons(list(Polygon(cbind(CL[[i]]$x, CL[[i]]$y))), ID=i))
spgons = SpatialPolygons(pgons)
## Leaflet map with polygons
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS])
LEVS <- as.factor(sapply(CL, `[[`, "level"))
NLEV <- length(levels(LEVS))
## CONVERT CONTOUR LINES TO POLYGONS
pgons <- lapply(1:length(CL), function(i)
Polygons(list(Polygon(cbind(CL[[i]]$y, CL[[i]]$x))), ID=i))
spgons = SpatialPolygons(pgons)
## Leaflet map with polygons
leaflet(spgons) %>% addTiles() %>%
addPolygons(color = heat.colors(NLEV, NULL)[LEVS])
str(landfalls)
kde2d <- bkde2D(landfalls, bandwidth=c(bw.ucv(landfalls[,1]),bw.ucv(landfalls[,2])))
x=kde2d$x2
y=kde2d$x1
z=kde2d$fhat
CL=contourLines(x , y , z)
m = leaflet() %>% addTiles()
m %>% addPolygons(CL[[5]]$x,CL[[5]]$y,fillColor = "red", stroke = FALSE)
landfalls
kde2d <- bkde2D(landfalls, bandwidth=c(bw.ucv(landfalls[,1]),bw.ucv(landfalls[,2])))
x=kde2d$x2
y=kde2d$x1
z=kde2d$fhat
CL=contourLines(x , y , z)
m = leaflet() %>% addTiles()
m %>% addPolygons(CL[[5]]$y,CL[[5]]$x,fillColor = "red", stroke = FALSE)
leaflet(landfalls) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
setView( 178, -20, 5 ) %>%
addHeatmap(lng = ~Lon, lat = ~Lat,blur = 20, max = 0.05, radius = 15)
library(leaflet.extras)
library("leaflet.extras")
install.packages("leaflet.extras")
library("leaflet.extras")
leaflet(landfalls) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
setView( 178, -20, 5 ) %>%
addHeatmap(lng = ~Lon, lat = ~Lat,blur = 20, max = 0.05, radius = 15)
landfalls
df<-hurdat
landfalls<-df[(df$Record=="L"),c(6,7)]
leaflet(landfalls) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
setView( 178, -20, 5 ) %>%
addHeatmap(lng = ~Lon, lat = ~Lat,blur = 20, max = 0.05, radius = 15)
leaflet(landfalls) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
setView( 178, -20, 5 ) %>%
addHeatmap(lng = ~Lon, lat = ~Lat,blur = 20, max = 0.05, radius = 5)
leaflet(landfalls) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addHeatmap(lng = ~Lon, lat = ~Lat,blur = 20, max = 0.05, radius = 10)
leaflet(landfalls) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addHeatmap(lng = ~Lon, lat = ~Lat,blur = 20, radius = 8)
leaflet(landfalls) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addHeatmap(lng = ~Lon, lat = ~Lat, radius =8)
leaflet(landfalls) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addHeatmap(lng = ~Lon, lat = ~Lat,blur=4, radius =8)
leaflet(landfalls) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addHeatmap(lng = ~Lon, lat = ~Lat,blur=10, radius =8)
leaflet(landfalls) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addHeatmap(lng = ~Lon, lat = ~Lat,blur=10, radius =3)
leaflet(landfalls) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addHeatmap(lng = ~Lon, lat = ~Lat,blur=10, radius =6)
leaflet(landfalls) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addHeatmap(lng = ~Lon, lat = ~Lat,blur=10, radius =7)
leaflet(landfalls) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addHeatmap(lng = ~Lon, lat = ~Lat,blur=10, radius =5)
leaflet(landfalls) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addHeatmap(lng = ~Lon, lat = ~Lat,blur=6, radius =5)
leaflet(landfalls) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addHeatmap(lng = ~Lon, lat = ~Lat,blur=8, radius =5)
leaflet(landfalls) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addHeatmap(lng = ~Lon, lat = ~Lat,blur=9, radius =5)
leaflet(landfalls) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addHeatmap(lng = ~Lon, lat = ~Lat,blur=10, radius =5)
landfalls<-rbind(landfalls,landfallsp)
leaflet(landfalls) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addHeatmap(lng = ~Lon, lat = ~Lat,blur=10, radius =5)
leaflet(landfallsp) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addHeatmap(lng = ~Lon, lat = ~Lat,blur=10, radius =5)
landfalls
landfalls<-rbind(landfalls,landfallsp)
leaflet(landfalls) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addHeatmap(lng = ~Lon, lat = ~Lat,blur=10, radius =5)
library(shiny); runApp('C:/Users/Parikshit/Downloads/app (2).R')
runApp('C:/Users/Parikshit/Downloads/app (2).R')
runApp('C:/Users/Parikshit/Downloads/app (2).R')
runApp('GitHub/CS_424_P2')
runApp('GitHub/CS_424_P2')
runApp('GitHub/CS_424_P2')
runApp()
shiny::runApp('GitHub/CS_424_P2')
